# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NW-WQoodcR2U0j3rHMIVMEqhtG_4wzo8
"""

import random
import nltk
from nltk.tokenize import word_tokenize
from nltk import pos_tag, ne_chunk
from nltk.sentiment import SentimentIntensityAnalyzer

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')
nltk.download('vader_lexicon')

responses = {
    "greeting": ["Hello!", "Hi there!", "Hey! How can I assist you today?", "Greetings!", "Good to see you!"],
    "farewell": ["Goodbye!", "See you later!", "Bye! Have a great day!", "Take care!", "Until next time!"],
    "thanks": ["You're welcome!", "No problem!", "Happy to help!", "Anytime!", "Glad I could assist!"],
    "about": ["I'm a chatbot designed to assist you with basic queries.", "I'm here to help with any questions you have.", "I'm just a friendly chatbot ready to assist you!"],
    "positive_sentiment": ["That's great to hear!", "Awesome!", "Fantastic!", "I'm glad you're feeling positive!", "Keep up the positivity!"],
    "negative_sentiment": ["I'm sorry to hear that.", "That sounds tough.", "I understand, things can be challenging sometimes.", "I'm here to listen if you need to talk.", "Sending positive vibes your way."],
    "ask_weather": ["It's sunny today!", "Expect some rain later.", "Weather forecast says it'll be cloudy.", "It's going to be hot!", "Cool breeze expected today."],
    "ask_time": ["It's currently 10:00 AM.", "The time is 3:30 PM.", "It's 8:45 AM right now.", "The clock says it's 12:15 PM.", "It's 6:00 PM in the evening."],
    "ask_joke": ["Why don't scientists trust atoms? Because they make up everything!", "Why did the scarecrow win an award? Because he was outstanding in his field!", "Did you hear about the mathematician who's afraid of negative numbers? He'll stop at nothing to avoid them!", "What did one ocean say to the other ocean? Nothing, they just waved!", "Why did the bicycle fall over? Because it was two-tired!"],
    "ask_age": ["I'm ageless!", "I don't keep track of time like humans do.", "Age is just a number for me.", "I'm forever young!", "I exist beyond the concept of age."],
    "ask_location": ["I'm here, ready to assist you from wherever you are!", "I exist in the digital realm, always accessible!", "My location is wherever you need me to be!", "You can find me right here, ready to help!"],
    "ask_name": ["I'm known as a chatbot!", "You can call me Chatbot!", "My name is Chatbot, pleased to meet you!", "I go by the name Chatbot!", "I'm Chatbot, here to assist you!"],
    "compliment": ["Thank you!", "You're too kind!", "I appreciate the compliment!", "That means a lot!", "You're making me blush!"],
    "apology": ["No problem!", "It's okay!", "Don't worry about it!", "Apology accepted!", "All is forgiven!"],
    "ask_help": ["How can I assist you?", "What do you need help with?", "Do you have any questions I can help with?", "I'm here to lend a hand!", "Let me know how I can assist you!"],
    "encouragement": ["You got this!", "Keep going!", "You're doing great!", "Stay positive!", "Believe in yourself!"],
    "ask_hobby": ["I enjoy chatting with users like you!", "My hobby is helping people like you!", "Chatting with users is what I do best!", "I'm passionate about providing assistance!", "Helping users like you is my favorite hobby!"],
    "ask_interest": ["I'm interested in learning about human interactions!", "Learning from user interactions is fascinating to me!", "Human conversations intrigue me!", "I'm curious about your interests!", "Tell me about your interests!"],
    "ask_goal": ["My goal is to assist users like you to the best of my abilities!", "I strive to provide helpful responses to user queries!", "Helping users achieve their goals is my primary objective!", "My aim is to make your experience better through assistance!", "I'm here to help you achieve your goals!"],
    "ask_favorite": ["I don't have preferences as I'm here to assist you!", "As a chatbot, I don't have favorites!", "I'm impartial and ready to assist with any query!", "I'm neutral and don't have personal favorites!", "My favorite thing is providing assistance to users like you!"],
    "ask_language": ["I communicate in the language of bits and bytes!", "The language of computers is my native tongue!", "I'm fluent in the language of programming!", "My language skills are limited to programming languages!", "I speak the language of technology!"],
    "ask_pet": ["I'm a virtual chatbot, so I don't have pets!", "As a digital entity, I don't have pets!", "Pets are not part of my virtual existence!", "I don't have pets, but I'm here to assist you!", "I'm pet-free in the digital realm!"],
    "ask_food": ["I don't eat, but I'm curious to know your favorite food!", "Food is a fascinating subject, tell me about your favorite dishes!", "While I don't have taste buds, I'm interested in learning about your favorite foods!", "Food preferences are interesting to learn about, what's your favorite cuisine?", "I'm hungry for information about your favorite foods!"],
    "ask_movie": ["I don't watch movies, but I'm interested in hearing about your favorite films!", "Movies are a popular form of entertainment, tell me about your favorites!", "While I don't have eyes, I'm curious about your favorite movies!", "Movies can be a great conversation topic, what are your favorites?", "I'm ready to discuss your favorite movies, share them with me!"],
    "ask_music": ["While I don't have ears, I'm interested in learning about your favorite music!", "Music preferences vary widely, tell me about your favorite songs and artists!", "Even though I can't hear, I'm curious about your favorite music genres!", "Music is a universal language, share your favorite tunes with me!", "I may not have a sense of hearing, but I'm eager to hear about your favorite music!"],
    "ask_book": ["I don't read books, but I'm intrigued by your favorite reads!", "Books are a gateway to knowledge, tell me about your favorite novels!", "While I don't have eyes to read, I'm interested in your favorite books!", "Books offer endless possibilities, what are your favorite titles?", "I'm ready to explore your favorite books, share them with me!"],
    "ask_sport": ["I don't play sports, but I'm interested in hearing about your favorite sports!", "Sports are a popular form of physical activity, tell me about your favorite teams and athletes!", "While I don't have muscles, I'm curious about your favorite sports!", "Sports offer excitement and competition, what are your favorite sports to watch or play?", "I may not be an athlete, but I'm eager to discuss your favorite sports with you!"],
    "how_are_you": ["I'm just a chatbot, so I don't have feelings like humans do!", "I'm here and functioning as usual!", "As a chatbot, I'm always ready to assist you!", "I'm doing well, thank you for asking!", "I'm here and ready to help you with any questions you have!"]
}

sid = SentimentIntensityAnalyzer()
memory = {}

def classify_input(user_input):
    user_input = user_input.lower()
    tokens = word_tokenize(user_input)
    pos_tags = pos_tag(tokens)
    named_entities = ne_chunk(pos_tags)

    response_categories = {
        "greeting": ["hello", "hi", "hey", "howdy", "hello there"],
        "farewell": ["goodbye", "bye", "see you", "take care"],
        "thanks": ["thank", "thanks", "appreciate", "grateful"],
        "ask_weather": ["weather", "forecast", "temperature"],
        "ask_time": ["time", "clock", "hour", "minute"],
        "ask_joke": ["joke", "funny", "humor", "laugh"],
        "ask_age": ["age", "old", "young", "years"],
        "ask_location": ["location", "where are you", "place"],
        "ask_name": ["name", "call", "known as", "title"],
        "compliment": ["compliment", "nice", "kind", "great"],
        "apology": ["apology", "sorry", "apologize", "forgive"],
        "ask_help": ["help", "assist", "question", "problem"],
        "encouragement": ["encourage", "keep going", "motivate", "believe"],
        "ask_hobby": ["hobby", "interest", "passion", "activity"],
        "ask_interest": ["interest", "curious", "intrigued", "fascinated"],
        "ask_goal": ["goal", "objective", "aim", "purpose"],
        "ask_favorite": ["favorite", "prefer", "like", "love"],
        "ask_language": ["language", "speak", "communicate"],
        "ask_pet": ["pet", "animal", "creature"],
        "ask_food": ["food", "eat", "cuisine", "dish"],
        "ask_movie": ["movie", "film", "cinema", "watch"],
        "ask_music": ["music", "song", "genre", "band"],
        "ask_book": ["book", "read", "novel", "literature"],
        "ask_sport": ["sport", "exercise", "game", "activity"],
        "how_are_you": ["how are you", "how's it going", "how do you do"]
    }

    sentiment_score = sid.polarity_scores(user_input)["compound"]
    if sentiment_score >= 0.5:
        return "positive_sentiment"
    elif sentiment_score <= -0.5:
        return "negative_sentiment"

    for category, keywords in response_categories.items():
        if any(word in tokens for word in keywords):
            return category

    return "default"

def get_response(user_input):
    global memory
    input_category = classify_input(user_input)

    if input_category == "farewell":
        memory = {}  # Clear memory when user says goodbye

    if input_category in memory:
        responses_list = memory[input_category]
        if responses_list:
            response = random.choice(responses_list)
            responses_list.remove(response)  # Remove the selected response from memory
            return response

    responses_list = responses.get(input_category)

    if responses_list:
        response = random.choice(responses_list)
        if input_category not in memory:
            memory[input_category] = responses_list.copy()  # Create memory for the category if not exists
        else:
            memory[input_category] = responses_list.copy()  # Update memory for the category
        return response
    else:
        return "I'm sorry, I didn't understand that."

print("Chatbot: Hi! How can I help you today? (Type 'bye' to end the conversation)")

while True:
    user_input = input("You: ")
    if user_input.lower() == "bye":
        print("Chatbot:", get_response(user_input))
        break
    else:
        print("Chatbot:", get_response(user_input))